---
- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['distribution'] }}.yml"

- name: Install CLI programs
  # become: yes
  package:
    name: "{{ cli_packages }}"
    state: present

  # - name: Install nix package manager
  #   when: enable_nix | default(False)

- name: Install desktop programs
  # become: yes
  package:
    name: "{{ desktop_packages }}"
    state: present

- name: Install utilities
  # become: yes
  package:
    name: "{{ utilities_packages }}"
    state: present

- name: Install dev programs
  # become: yes
  package:
    name: "{{ dev_packages }}"
    state: present

- name: Install extra packages
  # become: yes
  package:
    name: "{{ extra_packages }}"
    state: present
  when: enable_extra_packages

      # Teams is not available anymore
#- name: Check microsoft teams
#  debug:
#    msg: "Microsoft teams is already installed"
#  when: ms_teams_package_name in ansible_facts.packages
#  
#- name: Setup microsoft teams
#  when: ms_teams_package_name not in ansible_facts.packages and enable_ms_teams
#  block:
#  - name: Download microsoft teams
#    get_url:
#      url: "{{ ms_teams_url }}"
#      dest: "/tmp/ms_teams.deb"
#  - name: Install teams
#    apt:
#      deb: "/tmp/ms_teams.deb"

- name: Check Visual Studio Code
  debug:
    msg: "Visual Studio Code is already installed"
  when: "vscode_package_name in ansible_facts.packages"

- name: Setup microsoft vscode
  when: vscode_package_name not in ansible_facts.packages and enable_vscode
  block:
  - name: Download vscode
    get_url:
      url: "{{ vscode_url }}"
      dest: "/tmp/vscode.deb"
  - name: Install vscode
    apt:
      deb: "/tmp/vscode.deb"

- name: Check dbeaver
  debug:
    msg: "dbeaver is already installed"
  when: dbeaver_package_name in ansible_facts.packages

- name: Setup dbeaver
  when: dbeaver_package_name not in ansible_facts.packages and enable_extra_packages
  block:
  - name: Download dbeaver
    get_url:
      url: "{{ dbeaver_url }}"
      dest: "/tmp/{{ dbeaver_package_name }}.deb"
  - name: Install dbeaver
    apt:
      deb: "/tmp/{{ dbeaver_package_name }}.deb"

- name: Setup dwm and dwmblocks
  become: no
  when: enable_dwm | default(False)
  block:
    - name: Clone dwm personal build
      git:
        repo: "{{ dwm_repo }}"
        dest: "/home/{{ username }}/git/dwm"
        # force: yes
        version: "integration6.3"
    - name: Clone dwmblocks personal build
      git:
        repo: "{{ dwmblocks_repo }}"
        dest: "/home/{{ username }}/git/dwmblocks"
        # force: yes
    - name: Install dwmblocks
      become: yes
      community.general.make:
        chdir:  "/home/{{ username }}/git/dwmblocks"
        target: install
    - name: Install dwm
      become: yes
      community.general.make:
        chdir:  "/home/{{ username }}/git/dwm"
        target: install
    - name: Install dwm autorun
      become: yes
      file:
        src:  "/home/{{ username }}/git/dwm/dwm_autorun.sh"
        dest: "/usr/local/bin/dwm_autorun.sh"
        state: link
    - name: Install the xsession file
      become: yes
      template:
        src: "dwm.desktop.j2"
        dest: "/usr/share/xsessions/dwm.desktop"
        mode: 0644
        owner: root
        group: root

- name: Setup dmenu 
  become: no
  block:
    - name: Clone dmenu personal build
      git:
        repo: "{{ dmenu_repo }}"
        dest: "/home/{{ username }}/git/dmenu"
        # force: yes
    - name: Install dmenu
      become: yes
      community.general.make:
        chdir:  "/home/{{ username }}/git/dmenu"
        target: install

# - name: Setup st terminal
#   become: no
#   block:
#     - name: Clone st terminal personal build
#       git:
#         repo: "{{ st_repo }}"
#         dest: "{{ home_path }}/git/st"
#         version: "integration_0_8_5"
#     - name: Install st terminal 
#       become: yes
#       community.general.make:
#         chdir: "{{ home_path }}/git/st"
#         target: install
#     - name: Create st-terminal link
#       become: yes
#       file:
#         src: "/usr/local/bin/st"
#         dest: "/usr/local/bin/st-terminal"
#         state: link

# - name: Install st terminal

- name: Setup NVM/NodeJs
  become: no
  block:
    - name: Download nvm install Script
      get_url:
        url: "{{ nvm_url }}"
        dest: "/tmp/nvm_install.sh"
    - name: Install nvm
      shell:
        cmd: "bash /tmp/nvm_install.sh"

- name: Link xfce4-notifyd binary
  become: yes
  when: "'xfce4-notifyd' in desktop_packages"
  block:
    - name: Check if xfce4-notifyd binary exists
      stat:
        path: "{{ xfce4_notifyd_path }}"
      register: xfce4_notifyd_data
    - name: Link xfce4-notifyd binary
      file:
        src:  "{{ xfce4_notifyd_path }}"
        dest: "/usr/local/bin/xfce4_notifyd_data"
        state: link

- name: Download and install greenclip clipboard manager
  become: yes
  get_url:
    url: "{{ greenclip_url }}"
    dest: "/usr/bin/greenclip"
    mode: '0755'

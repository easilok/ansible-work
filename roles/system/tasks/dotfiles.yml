---
- name: Include OS-specific variables
  include_vars: "{{ ansible_facts['os_family'] }}.yml"

    #- name: Clone the latest dotfiles repo
    #  become: no
    #  git:
    #    repo: "{{ dotfiles_repo }}"
    #    dest: "{{ dotfiles_path }}"
    #    # recursive: no
    #    # force: yes

# Link folders
- name: Link dotfiles
  become: false
  block:
    - name: Ensure local/bin directory
      file:
        dest: "{{ home_path }}/.local/bin"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
    - name: Setting default terminal
      become: true
      file:
        src: "{{ default_terminal_path }}"
        dest: "/usr/bin/default_terminal"
        state: link
    - name: Link bspwm config
      file:
        src:  "{{ dotfiles_path }}/home/.config/bspwm"
        dest: "{{ home_path }}/.config/bspwm"
        state: link
    - name: Link sxhkd config
      file:
        src:  "{{ dotfiles_path }}/home/.config/sxhkd"
        dest: "{{ home_path }}/.config/sxhkd"
        state: link
    - name: Link rofi config
      file:
        src:  "{{ dotfiles_path }}/home/.config/rofi"
        dest: "{{ home_path }}/.config/rofi"
        state: link
    - name: Link polybar config
      file:
        src:  "{{ dotfiles_path }}/home/.config/polybar"
        dest: "{{ home_path }}/.config/polybar"
        state: link
    - name: Link Dunst config
      file:
        src:  "{{ dotfiles_path }}/home/.config/dunst"
        dest: "{{ home_path }}/.config/dunst"
        state: link
    - name: Link emacs config
      file:
        src:  "{{ dotfiles_path }}/home/.config/emacs.d.raw"
        dest: "{{ home_path }}/.emacs.d"
        state: link
    - name: Link scripts folder
      file:
        src:  "{{ dotfiles_path }}/home/scripts"
        dest: "{{ home_path }}/scripts"
        state: link
    - name: Link zsh config
      file:
        src:  "{{ dotfiles_path }}/home/.config/zsh/raw/.zshrc"
        dest: "{{ home_path }}/.zshrc"
        state: link
    - name: Link zsh folder
      file:
        src:  "{{ dotfiles_path }}/home/.config/zsh"
        dest: "{{ home_path }}/.config/zsh"
        state: link
    - name: Link tmux config
      file:
        src:  "{{ dotfiles_path }}/home/.config/tmux/tmux.conf"
        dest: "{{ home_path }}/.tmux.conf"
        state: link
    - name: Link lf config
      file:
        src:  "{{ dotfiles_path }}/home/.config/lf"
        dest: "{{ home_path }}/.config/lf"
        state: link
    - name: Link compton config
      file:
        src:  "{{ dotfiles_path }}/home/.config/compton.conf"
        dest: "{{ home_path }}/.config/compton.conf"
        state: link
    - name: Link picom config
      file:
        src:  "{{ dotfiles_path }}/home/.config/picom"
        dest: "{{ home_path }}/.config/picom"
        state: link
    - name: Link alacritty config
      file:
        src:  "{{ dotfiles_path }}/home/.config/alacritty"
        dest: "{{ home_path }}/.config/alacritty"
        state: link
    - name: Link qutebrowser config
      file:
        src:  "{{ dotfiles_path }}/home/.config/qutebrowser"
        dest: "{{ home_path }}/.config/qutebrowser"
        state: link
    - name: Link kitty config
      file:
        src:  "{{ dotfiles_path }}/home/.config/kitty"
        dest: "{{ home_path }}/.config/kitty"
        state: link
    - name: Link xmodmap config
      file:
        src:  "{{ dotfiles_path }}/home/.Xmodmap"
        dest: "{{ home_path }}/.Xmodmap"
        state: link
    - name: Link xsettings config
      file:
        src:  "{{ dotfiles_path }}/home/.config/xsettingsd"
        dest: "{{ home_path }}/.config/xsettingsd"
        state: link
    - name: Link alias
      file:
        src:  "{{ dotfiles_path }}/home/.config/aliasrc"
        dest: "{{ home_path }}/.config/aliasrc"
        state: link

- name: Setup neomutt config
  become: false
  block:
    - name: Creates neomutt config folder
      file:
        dest: "{{ home_path }}/.config/neomutt"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
    - name: Gathers all neomutt config files
      find:
        paths:  "{{ dotfiles_path }}/home/.config/neomutt/"
        file_type: "any"
      register: neomutt_files
    - name: Link all neomutt config files
      file:
        src: "{{ item.path }}"
        dest: "{{ home_path }}/.config/neomutt/{{ item.path | basename }}"
        state: link
      with_items: "{{ neomutt_files.files }}"

- name: Setup git config
  become: false
  block:
    - name: Link git config
      file:
        src:  "{{ dotfiles_path }}/home/.config/git/{{ item }}"
        dest: "{{ home_path }}/{{ item }}"
        state: link
      with_items:
        - ".gitconfig"
        - ".gitignore"
    - name: Gathers all git scripts
      find:
        paths:  "{{ dotfiles_path }}/home/scripts/git/"
        # file_type: "any"
      register: git_scripts
    - name: Link all git scripts
      file:
        src: "{{ item.path }}"
        dest: "{{ home_path }}/.local/bin/{{ item.path | basename }}"
        state: link
      with_items: "{{ git_scripts.files }}"

- name: Setup dmenu scripts
  become: false
  block:
  - name: Link dmenu config folder
    file:
      src:  "{{ dotfiles_path }}/home/.config/dmenu"
      dest: "{{ home_path }}/.config/dmenu"
      state: link
  - name: Gathers all dmenu script files
    find:
      paths:  "{{ dotfiles_path }}/home/.config/dmenu/scripts"
      # file_type: "any"
    register: dmenu_script_files
  - name: Link scripts
    file:
      src: "{{ item.path }}"
      dest: "{{ home_path }}/.local/bin/{{ item.path | basename }}"
      state: link
    with_items: "{{ dmenu_script_files.files }}"

- name: Setup vim/nvim
  become: false
  block:
    - name: Ensure .vim folder
      file:
        dest: "{{ home_path }}/.vim"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
    - name: Ensure vim-autoload folder
      file:
        dest: "{{ home_path }}/.vim/autoload"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
    - name: Install vim-plug for vim
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ home_path }}/.vim/autoload/plug.vim"
    - name: Link vimrc
      file:
        src: "{{ dotfiles_path }}/home/.vimrc"
        dest: "{{ home_path }}/.vimrc"
        state: link
    - name: Gathers all vim files
      find:
        paths:  "{{ dotfiles_path }}/home/.config/vim/"
        file_type: "any"
      register: vim_files
    - name: Link all vim files
      file:
        src: "{{ item.path }}"
        dest: "{{ home_path }}/.vim/{{ item.path | basename }}"
        state: link
      with_items: "{{ vim_files.files }}"
    - name: Ensure nvim-autoload folder
      file:
        dest: "{{ home_path }}/.local/share/nvim/site/autoload"
        state: directory
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
    - name: Install vim-plug for neovim
      get_url:
        url: https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        dest: "{{ home_path }}/.local/share/nvim/site/autoload/plug.vim"
    - name: Run stow on nvim configuration
      shell:
        chdir: "{{ dotfiles_path }}"
        cmd: "stow --target {{ home_path }} --verbose=2 nvim"
      register: result
      changed_when: 'result.stderr is search("LINK: ")'

- name: link todo.txt config
  become: false
  shell:
    chdir: "{{ dotfiles_path }}"
    cmd: "stow --target {{ home_path }} --verbose=2 todotxt"
  register: result
  changed_when: 'result.stderr is search("LINK: ")'

- name: link i3 config
  become: false
  shell:
    chdir: "{{ dotfiles_path }}"
    cmd: "stow --target {{ home_path }} --verbose=2 i3"
  register: result
  changed_when: 'result.stderr is search("LINK: ")'
